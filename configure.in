#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.60)
AC_INIT(doslib2, 2.0, jonathan@impactstudiopro.com)
AM_INIT_AUTOMAKE(doslib2,2.0)
AC_CONFIG_SRCDIR([cleantree])
AC_CONFIG_HEADER([config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_PREFIX_DEFAULT(/usr)
AC_PROG_LIBTOOL

# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AM_PROG_CC_C_O

# We need Perl
AC_CHECK_PROGS(PERL,$PERL perl,error)
if test x"$PERL" = x"error"; then
	AC_MSG_ERROR([Perl is required to build this source code])
fi

# We need NASM
AC_CHECK_PROGS(NASM,$NASM nasm,error)
if test x"$NASM" = x"error"; then
	AC_MSG_ERROR([NASM (Netwide assembler) is required to build this source code])
fi

# we need to find the Open Watcom installation
# TODO: Can we also allow the user to install WINE and Windows binaries of Open Watcom?
if test x"$OPENWATCOM" = x; then if [[ -d /usr/watcom-1.9 ]]; then OPENWATCOM=/usr/watcom-1.9; fi; fi
if test x"$OPENWATCOM" = x; then if [[ -d /usr/watcom-1.8 ]]; then OPENWATCOM=/usr/watcom-1.8; fi; fi
if test x"$OPENWATCOM" = x; then if [[ -d /usr/watcom     ]]; then OPENWATCOM=/usr/watcom    ; fi; fi
if test x"$OPENWATCOM" = x; then
	AC_MSG_ERROR([Open Watcom is required to build this source code])
fi

# We need Watcom C (16-bit)
AC_CHECK_PROGS(OWCC,$OWCC $OPENWATCOM/binl/wcc,error,[$PATH /])
if test x"$OWCC" = x"error"; then
	AC_MSG_ERROR([Open Watcom C compiler wcc is required to build this source code])
fi

# We need Watcom C (32-bit)
AC_CHECK_PROGS(OWCC386,$OWCC386 $OPENWATCOM/binl/wcc386,error,[$PATH /])
if test x"$OWCC386" = x"error"; then
	AC_MSG_ERROR([Open Watcom C compiler wcc386 is required to build this source code])
fi

# We need Watcom C strip utility
AC_CHECK_PROGS(OWSTRIP,$OWSTRIP $OPENWATCOM/binl/wstrip,error,[$PATH /])
if test x"$OWSTRIP" = x"error"; then
	AC_MSG_ERROR([Open Watcom wstrip is required to build this source code])
fi

# We need Watcom C resource compiler
AC_CHECK_PROGS(OWRC,$OWRC $OPENWATCOM/binl/wrc,error,[$PATH /])
if test x"$OWRC" = x"error"; then
	AC_MSG_ERROR([Open Watcom resource compiler (wrc) is required to build this source code])
fi

# We need Watcom C bind utility (for Win386 builds)
AC_CHECK_PROGS(OWBIND,$OWBIND $OPENWATCOM/binl/wbind,error,[$PATH /])
if test x"$OWBIND" = x"error"; then
	AC_MSG_ERROR([Open Watcom win386 bind utility (wbind) is required to build this source code])
fi

# We need Watcom C lib utility
AC_CHECK_PROGS(OWLIB,$OWLIB $OPENWATCOM/binl/wlib,error,[$PATH /])
if test x"$OWLIB" = x"error"; then
	AC_MSG_ERROR([Open Watcom wlib is required to build this source code])
fi

# We need Watcom C linker
AC_CHECK_PROGS(OWLINK,$OWLINK $OPENWATCOM/binl/wlink,error,[$PATH /])
if test x"$OWLINK" = x"error"; then
	AC_MSG_ERROR([Open Watcom wlink is required to build this source code])
fi

# We need Watcom C linker
AC_CHECK_PROGS(OWCL,$OWCL $OPENWATCOM/binl/wcl,error,[$PATH /])
if test x"$OWCL" = x"error"; then
	AC_MSG_ERROR([Open Watcom wcl is required to build this source code])
fi

# define Watcom environment block
WATENV="\"PATH=$OPENWATCOM/binl:$PATH\" \"WATCOM=$OPENWATCOM\" \"EDPATH=$OPENWATCOM/eddat\" \"INCLUDE=$OPENWATCOM/h/nt;$OPENWATCOM/h/nt/directx;$OPENWATCOM/h/nt/ddk;$OPENWATCOM/h\""

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h stdint.h stdlib.h string.h sys/socket.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_INT64_T
AC_TYPE_UINT32_T
AC_TYPE_UINT8_T

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_CHECK_FUNCS([memset])

LT_INIT

LIBS=-lm

m4_define([ISP_AUTO_OPTION_ENABLED_DEF],[
  AC_ARG_ENABLE([$1],AC_HELP_STRING([--][$5][-][$1],[$5 $3]))
  if test x"$enable_$2" = x
    then
    enable_$2=$4
  fi
  if test x"$enable_$2" = xyes
    then
    AC_DEFINE([ENABLE_][$2],[1],[$3])
  fi
  AM_CONDITIONAL([ENABLE_][$2],[test x"$enable_$2" = xyes])
])

m4_define([ISP_AUTO_OPTION_ENABLED],[ISP_AUTO_OPTION_ENABLED_DEF([$1],[$2],[$3],[yes],[disable])])
m4_define([ISP_AUTO_OPTION_DISABLED],[ISP_AUTO_OPTION_ENABLED_DEF([$1],[$2],[$3],[no],[enable])])

ISP_AUTO_OPTION_ENABLED([debug],            [debug],            [debug builds])
ISP_AUTO_OPTION_ENABLED([cpuonly],          [cpuonly],          [cpu-specific builds])
ISP_AUTO_OPTION_ENABLED([extlib],           [extlib],           [builds that call external memory-resident library functions])
ISP_AUTO_OPTION_ENABLED([mm-compact],       [mm_compact],       [16-bit compact memory model builds])
ISP_AUTO_OPTION_ENABLED([mm-small],         [mm_small],         [16-bit small memory model builds])
ISP_AUTO_OPTION_ENABLED([mm-medium],        [mm_medium],        [16-bit medium memory model builds])
ISP_AUTO_OPTION_ENABLED([mm-large],         [mm_large],         [16-bit large memory model builds])
ISP_AUTO_OPTION_ENABLED([mm-huge],          [mm_huge],          [16-bit huge memory model builds])
ISP_AUTO_OPTION_ENABLED([mm-flat],          [mm_flat],          [32-bit flat memory model builds])
ISP_AUTO_OPTION_ENABLED([dos16r],           [dos16r],           [16-bit real-mode DOS programs])
ISP_AUTO_OPTION_ENABLED([dos32p],           [dos32p],           [32-bit protected-mode DOS programs])
ISP_AUTO_OPTION_ENABLED([win16r],           [win16r],           [16-bit real-mode Win16 programs])
ISP_AUTO_OPTION_ENABLED([win16p],           [win16p],           [16-bit protected-mode Win16 programs])
ISP_AUTO_OPTION_ENABLED([win16b],           [win16b],           [16-bit bimodal (protected or real mode) Win16 programs])
ISP_AUTO_OPTION_ENABLED([win386],           [win386],           [32-bit Win386 programs])
ISP_AUTO_OPTION_ENABLED([win32s],           [win32s],           [32-bit Win32s programs])
ISP_AUTO_OPTION_ENABLED([win32],            [win32],            [32-bit Win32 programs (designed for Windows 9x/ME and NT/2000/XP/Vista/7/etc])
ISP_AUTO_OPTION_ENABLED([linux-host],       [linux_host],       [programs for your host Linux. Note that they are compiled anyway if needed for the build])
ISP_AUTO_OPTION_ENABLED([cpu-8086],         [cpu_8086],         [8086 level builds])
ISP_AUTO_OPTION_ENABLED([cpu-286],          [cpu_286],          [286 level builds])
ISP_AUTO_OPTION_ENABLED([cpu-386],          [cpu_386],          [386 level builds])
ISP_AUTO_OPTION_ENABLED([cpu-486],          [cpu_486],          [486 level builds])
ISP_AUTO_OPTION_ENABLED([cpu-586],          [cpu_586],          [586 level builds])
ISP_AUTO_OPTION_ENABLED([cpu-686],          [cpu_686],          [686 level builds])

AC_CONFIG_FILES(test/test1/Makefile)
AC_CONFIG_FILES(test/Makefile)
AC_CONFIG_FILES(Makefile)

AC_OUTPUT

echo -n >>config.h
cat >>config.h <<_EOF
_EOF
./config_mak >config.mak
./config.h.filter <config.h >config_public.h

# emit other vars to config.mak
echo OPENWATCOM=$OPENWATCOM >>config.mak
echo WATENV=\'$WATENV\' >>config.mak

echo '-include $(abs_top_srcdir)/config.utils.mak' >>config.mak

